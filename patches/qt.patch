diff --git a/qtbase/src/plugins/platforms/wasm/qwasmclipboard.cpp b/qtbase/src/plugins/platforms/wasm/qwasmclipboard.cpp
index f02c2c6cc..667772b72 100644
--- a/qtbase/src/plugins/platforms/wasm/qwasmclipboard.cpp
+++ b/qtbase/src/plugins/platforms/wasm/qwasmclipboard.cpp
@@ -198,15 +198,15 @@ void QWasmClipboard::installEventHandlers(const QString &canvasId)
         return;
 
     // Fallback path for browsers which do not support direct clipboard access
-    val document = val::global("document");
-    val canvas = document.call<val>("getElementById", QWasmString::fromQString(canvasId));
-
-    canvas.call<void>("addEventListener", val("cut"),
-                      val::module_property("qtClipboardCutTo"));
-    canvas.call<void>("addEventListener", val("copy"),
-                      val::module_property("qtClipboardCopyTo"));
-    canvas.call<void>("addEventListener", val("paste"),
-                      val::module_property("qtClipboardPasteTo"));
+    // val document = val::global("document");
+    // val canvas = document.call<val>("getElementById", QWasmString::fromQString(canvasId));
+
+    // canvas.call<void>("addEventListener", val("cut"),
+    //                   val::module_property("qtClipboardCutTo"));
+    // canvas.call<void>("addEventListener", val("copy"),
+    //                   val::module_property("qtClipboardCopyTo"));
+    // canvas.call<void>("addEventListener", val("paste"),
+    //                   val::module_property("qtClipboardPasteTo"));
 }
 
 void QWasmClipboard::readTextFromClipboard()
diff --git a/qtbase/src/plugins/platforms/wasm/qwasmcursor.cpp b/qtbase/src/plugins/platforms/wasm/qwasmcursor.cpp
index 616456b2f..bd489db2e 100644
--- a/qtbase/src/plugins/platforms/wasm/qwasmcursor.cpp
+++ b/qtbase/src/plugins/platforms/wasm/qwasmcursor.cpp
@@ -57,11 +57,11 @@ void QWasmCursor::changeCursor(QCursor *windowCursor, QWindow *window)
         htmlCursorName = "auto";
 
     // Set cursor on the canvas
-    val jsCanvasId = QWasmString::fromQString(QWasmScreen::get(screen)->canvasId());
-    val document = val::global("document");
-    val canvas = document.call<val>("getElementById", jsCanvasId);
-    val canvasStyle = canvas["style"];
-    canvasStyle.set("cursor", val(htmlCursorName.constData()));
+    // val jsCanvasId = QWasmString::fromQString(QWasmScreen::get(screen)->canvasId());
+    // val document = val::global("document");
+    // val canvas = document.call<val>("getElementById", jsCanvasId);
+    // val canvasStyle = canvas["style"];
+    // canvasStyle.set("cursor", val(htmlCursorName.constData()));
 }
 
 QByteArray QWasmCursor::cursorShapeToHtml(Qt::CursorShape shape)
diff --git a/qtbase/src/plugins/platforms/wasm/qwasmeventdispatcher.cpp b/qtbase/src/plugins/platforms/wasm/qwasmeventdispatcher.cpp
index ca8db9b21..0229a345c 100644
--- a/qtbase/src/plugins/platforms/wasm/qwasmeventdispatcher.cpp
+++ b/qtbase/src/plugins/platforms/wasm/qwasmeventdispatcher.cpp
@@ -35,7 +35,7 @@
 
 #if QT_CONFIG(thread)
 #if (__EMSCRIPTEN_major__ > 1 || __EMSCRIPTEN_minor__ > 38 || __EMSCRIPTEN_minor__ == 38 && __EMSCRIPTEN_tiny__ >= 22)
-#  define EMSCRIPTEN_HAS_ASYNC_RUN_IN_MAIN_RUNTIME_THREAD
+// #  define EMSCRIPTEN_HAS_ASYNC_RUN_IN_MAIN_RUNTIME_THREAD
 #endif
 #endif
 
diff --git a/qtbase/src/plugins/platforms/wasm/qwasmintegration.cpp b/qtbase/src/plugins/platforms/wasm/qwasmintegration.cpp
index 69f58013e..bdb32bc80 100644
--- a/qtbase/src/plugins/platforms/wasm/qwasmintegration.cpp
+++ b/qtbase/src/plugins/platforms/wasm/qwasmintegration.cpp
@@ -124,7 +124,7 @@ QWasmIntegration::QWasmIntegration()
         addScreen(canvasId);
     }
 
-    emscripten::val::global("window").set("onbeforeunload", val::module_property("qtBrowserBeforeUnload"));
+    // emscripten::val::global("window").set("onbeforeunload", val::module_property("qtBrowserBeforeUnload"));
 
     // install browser window resize handler
     auto onWindowResize = [](int eventType, const EmscriptenUiEvent *e, void *userData) -> int {
diff --git a/qtbase/src/plugins/platforms/wasm/qwasmopenglcontext.cpp b/qtbase/src/plugins/platforms/wasm/qwasmopenglcontext.cpp
index 501ab9911..2febd5dc7 100644
--- a/qtbase/src/plugins/platforms/wasm/qwasmopenglcontext.cpp
+++ b/qtbase/src/plugins/platforms/wasm/qwasmopenglcontext.cpp
@@ -88,7 +88,7 @@ EMSCRIPTEN_WEBGL_CONTEXT_HANDLE QWasmOpenGLContext::createEmscriptenContext(cons
     EmscriptenWebGLContextAttributes attributes;
     emscripten_webgl_init_context_attributes(&attributes); // Populate with default attributes
 
-    attributes.preferLowPowerToHighPerformance = false;
+    // attributes.preferLowPowerToHighPerformance = false;
     attributes.failIfMajorPerformanceCaveat = false;
     attributes.antialias = true;
     attributes.enableExtensionsByDefault = true;
diff --git a/qtbase/src/plugins/platforms/wasm/qwasmscreen.cpp b/qtbase/src/plugins/platforms/wasm/qwasmscreen.cpp
index d407111c2..09f051f32 100644
--- a/qtbase/src/plugins/platforms/wasm/qwasmscreen.cpp
+++ b/qtbase/src/plugins/platforms/wasm/qwasmscreen.cpp
@@ -126,8 +126,9 @@ qreal QWasmScreen::devicePixelRatio() const
     // HTML window dpr if the OpenGL driver/GPU allocates a less than
     // full resolution surface. Use emscripten_webgl_get_drawing_buffer_size()
     // and compute the dpr instead.
-    double htmlWindowDpr = emscripten::val::global("window")["devicePixelRatio"].as<double>();
-    return qreal(htmlWindowDpr);
+    // double htmlWindowDpr = emscripten::val::global("window")["devicePixelRatio"].as<double>();
+    // return qreal(htmlWindowDpr);
+    return qreal(1.0);
 }
 
 QString QWasmScreen::name() const
@@ -185,18 +186,21 @@ void QWasmScreen::updateQScreenAndCanvasRenderSize()
     QSizeF cssSize(css_width, css_height);
 
     QSizeF canvasSize = cssSize * devicePixelRatio();
-    val document = val::global("document");
-    val canvas = document.call<val>("getElementById", QWasmString::fromQString(m_canvasId));
+    // val document = val::global("document");
+    // val canvas = document.call<val>("getElementById", QWasmString::fromQString(m_canvasId));
+    val canvas = val::module_property("canvas");
+
 
     canvas.set("width", canvasSize.width());
     canvas.set("height", canvasSize.height());
 
-    QPoint offset;
-    offset.setX(canvas["offsetTop"].as<int>());
-    offset.setY(canvas["offsetLeft"].as<int>());
+    // QPoint offset;
+    // offset.setX(canvas["offsetTop"].as<int>());
+    // offset.setY(canvas["offsetLeft"].as<int>());
 
-    emscripten::val rect = canvas.call<emscripten::val>("getBoundingClientRect");
-    QPoint position(rect["left"].as<int>() - offset.x(), rect["top"].as<int>() - offset.y());
+    // emscripten::val rect = canvas.call<emscripten::val>("getBoundingClientRect");
+    // QPoint position(rect["left"].as<int>() - offset.x(), rect["top"].as<int>() - offset.y());
+    QPoint position(0, 0);
 
     setGeometry(QRect(position, cssSize.toSize()));
     m_compositor->redrawWindowContent();
